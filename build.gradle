buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.3'
    }
}

plugins {
    id "com.stehno.gradle.webpreview" version "0.1.1"
}

apply plugin: 'org.asciidoctor.convert'

group = 'io.github.http-builder-ng'
version = '0.13.2'

repositories {
    jcenter()
}

subprojects {
    apply plugin:'groovy'
    apply plugin:'maven'
    apply plugin:'maven-publish'
    apply plugin:'jacoco'
    apply plugin:'findbugs'

    group = project.parent.group
    version = project.parent.version

    sourceCompatibility = 8
    targetCompatibility = 8

    repositories {
        jcenter()
    }

    configurations {
        asciidoclet
    }

    dependencies {
        // optionals
        [
            'com.opencsv:opencsv:3.8',
            'oauth.signpost:signpost-commonshttp4:1.2.1.1',
            'oauth.signpost:signpost-core:1.2.1.1',
            'org.codehaus.groovy:groovy-all:2.4.8',
            'org.jsoup:jsoup:1.9.2',
            'net.sourceforge.nekohtml:nekohtml:1.9.22',
            'com.fasterxml.jackson.core:jackson-databind:2.8.1'
        ].each { opt ->
            compileOnly(opt)
            testCompile(opt)
        }

        testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'
        testCompile 'com.stehno.ersatz:ersatz:0.4.2'
        testCompile 'com.stehno.vanilla:vanilla-core:0.5.1'

        asciidoclet 'org.asciidoctor:asciidoclet:1.+'
    }

    tasks.withType(FindBugs) {
        ignoreFailures = true       // let's not kill the build for this
        effort = 'max'
        reportLevel = 'low'
        reports {
            xml.enabled false
            html.enabled true
            html.stylesheet resources.text.fromFile('../config/findbugs-styles.xsl')
        }
    }

    jacocoTestReport {
        reports {
            xml.enabled = true // coveralls plugin depends on xml format report
            html.enabled = true
        }
    }

    javadoc {
        options.docletpath = configurations.asciidoclet.files.asType(List)
        options.links("http://docs.oracle.com/javase/8/docs/api/", "http://docs.groovy-lang.org/latest/html/gapi/");
        options.doclet = 'org.asciidoctor.Asciidoclet'
        options.overview = "src/main/java/overview.adoc"
        options.addStringOption "-base-dir", "${projectDir}"
        options.addStringOption "-attribute", "name=${project.name},version=${project.version},title-link=https://github.com/http-builder-ng/http-builder-ng[${project.name} ${project.version}]"
    }

    task sourcesJar(type: Jar) {
        description = 'Creates sources JAR.'
        classifier = 'sources'
        from project.sourceSets.main.allSource
    }

    artifacts {
        archives jar
        archives sourcesJar
    }

    project.publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                //artifact jar
                artifact sourcesJar
                groupId project.group
                version project.version
            }
        }

        configurations.runtime.allDependencies.each {
            println(it);
        }
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }
}

asciidoctor {
    options doctype: 'book'

    backends = ['html5']

    attributes 'source-highlighter': 'coderay',
        'coderay-linenums-mode': 'table',
        icon: 'font',
        linkattrs: true,
        encoding: 'utf-8'
}

task site(group: 'Documentation', description: 'Builds the documentation web site.', dependsOn: [
    'build','http-builder-ng-core:build', 'http-builder-ng-apache:build', 'http-builder-ng-okhttp:build',
    'http-builder-ng-core:javadoc', 'http-builder-ng-apache:javadoc', 'http-builder-ng-okhttp:javadoc',
    'http-builder-ng-core:jacocoTestReport', 'http-builder-ng-apache:jacocoTestReport', 'http-builder-ng-okhttp:jacocoTestReport',
    'http-builder-ng-core:findbugsMain', 'http-builder-ng-apache:findbugsMain', 'http-builder-ng-okhttp:findbugsMain',
    'asciidoctor'
]){
    doLast {
        logger.info 'Building documentation web site...'

        // copy the templates
        copy {
            from 'src/site'
            into 'build/site'
            include '**/*.html'
            expand([ project_version:project.version ])
        }

        // copy the assets
        copy {
            from 'src/site'
            into 'build/site'
            include '**/css/**'
            include '**/fonts/**'
            include '**/js/**'
        }

        copy {
            from 'build/asciidoc'
            include '**/**'
            into 'build/site/guide'
        }

        // core
        copy {
            from 'http-builder-ng-core/build/docs'
            from 'http-builder-ng-core/build/reports'
            include '**/**'
            into 'build/site/core'
        }

        // apache
        copy {
            from 'http-builder-ng-apache/build/docs'
            from 'http-builder-ng-apache/build/reports'
            include '**/**'
            into 'build/site/apache'
        }

        // okhttp
        copy {
            from 'http-builder-ng-okhttp/build/docs'
            from 'http-builder-ng-okhttp/build/reports'
            include '**/**'
            into 'build/site/okhttp'
        }
    }
}

task publishSite(type: GradleBuild, group: 'Publishing', description: 'Publishes the documentation web site.', dependsOn: ['site']) {
    buildFile = 'publish.gradle'
    tasks = ['publishGhPages']
}

task updateVersion(group: 'Documentation', description: 'Updates the version in documentation based on the project version'){
    doLast {
        String newVersion = project.version
        String oldVersion = project.property('from')

        logger.lifecycle "Updating documentation versions from ${oldVersion} to ${newVersion}..."

        ant.replace(file: 'README.md', token: oldVersion, value: newVersion)
        ant.replace(dir: 'src/docs/asciidoc', token: oldVersion, value: newVersion)
        ant.replace(dir: 'src/site', token: oldVersion, value: newVersion)
    }
}

task checkVersion(group: 'Verification', description: 'Verify that the project version is reflected in the documentation.'){
    doLast {
        logger.lifecycle "Verifying that the documentation references version ${project.version}..."

        // Not the most efficient way to do this but should be ok for now
        boolean documented = ['README.md', 'src/docs/asciidoc/index.adoc'].every { f ->
            boolean ok = project.file(f).text.contains(project.version)

            logger.info " - Checking: $f: $ok"
            ok
        }

        assert documented, 'The documented project version does not match the project version: Run "./gradlew updateVersion -Pfrom=OLD_VERSION" and try again.'
    }
}

task verifyArtifacts(group: 'Verification', description: 'Verifies that the published artifacts exist in the remote repository.'){
    doLast {
        def base = 'https://dl.bintray.com/http-builder-ng/dclark/org/codehaus/groovy/modules' ///${project.version}/"
        def artifacts = [
            "$base/http-builder-ng-core/$project.version/http-builder-ng-core-$project.version-sources.jar",
            "$base/http-builder-ng-core/$project.version/http-builder-ng-core-${project.version}.jar",
            "$base/http-builder-ng-core/$project.version/http-builder-ng-core-${project.version}.pom",

            "$base/http-builder-ng-apache/$project.version/http-builder-ng-apache-$project.version-sources.jar",
            "$base/http-builder-ng-apache/$project.version/http-builder-ng-apache-${project.version}.jar",
            "$base/http-builder-ng-apache/$project.version/http-builder-ng-apache-${project.version}.pom",

            "$base/http-builder-ng-okhttp/$project.version/http-builder-ng-okhttp-$project.version-sources.jar",
            "$base/http-builder-ng-okhttp/$project.version/http-builder-ng-okhttp-${project.version}.jar",
            "$base/http-builder-ng-okhttp/$project.version/http-builder-ng-okhttp-${project.version}.pom"
        ]

        logger.lifecycle "Verifying that artifacts exist at $base..."

        boolean published = artifacts.every { art ->
            boolean ok = checkUrl(art)
            logger.info " - Checking: $art: ${ok ? 'ok' : 'missing'}"
            ok
        }

        assert published, 'Some or all of the artifacts are not published. Run with --info for more details.'
    }
}

task verifySite(group: 'Verification', description: 'Verifies that the documentation site exists at the expected address.'){
    doLast {
        def siteUrl = project.hasProperty('siteUrl') ? project.property('siteUrl') : 'https://http-builder-ng.github.io/http-builder-ng/'

        logger.lifecycle "Verifying that site exists at ${siteUrl}..."

        // we'll just hit the important ones
        boolean exists = [ '/index.html', '/guide/html5/index.html', '/core/javadoc/index.html' ].every { page ->
            boolean ok = checkUrl("${siteUrl}${page}")
            logger.info " - Checking: ${siteUrl}${page}: $ok"
            ok
        }

        assert exists, 'Some or all of the documentation site pages are not published. Run with --info for more details.'
    }
}

task release(group: 'Development', description: 'Release a new version of the library.', dependsOn: [
    'checkVersion',
    'clean', 'http-builder-ng-core:clean', 'http-builder-ng-apache:clean', 'http-builder-ng-okhttp:clean',
    'build', 'http-builder-ng-core:build', 'http-builder-ng-apache:build', 'http-builder-ng-okhttp:build',
    'http-builder-ng-core:bintrayUpload', 'http-builder-ng-apache:bintrayUpload', 'http-builder-ng-okhttp:bintrayUpload',
    'publishSite'
]){
    doLast {
        logger.lifecycle 'Library has been released - confirm the Bintray publications and run "./gradlew verifyRelease"'
    }
}

task verifyRelease(group: 'Verification', description: 'Verifies that the release was successful.', dependsOn: ['verifyArtifacts', 'verifySite']){
    doLast {
        logger.lifecycle 'Release has been verified.'
    }
}

webPreview {
    resourceDir = file('build/site')
}

static boolean checkUrl(String url) {
    try {
        def conn = url.toURL().openConnection() as HttpURLConnection
        conn.requestMethod = 'HEAD'
        return conn.responseCode == 200
    } catch (ex) {
        return false
    }
}
