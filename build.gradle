buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.3'
    }
}

plugins {
    id 'java'
    id 'jacoco'
    id 'findbugs'
    id "com.stehno.gradle.webpreview" version "0.1.1"
}

apply plugin: 'org.asciidoctor.convert'

group = 'org.codehaus.groovy.modules'
version = '0.10.2'

repositories {
    jcenter()
}

configurations {
    asciidoclet
}

asciidoctor {
    options doctype: 'book'

    backends = ['html5']

    attributes 'source-highlighter': 'coderay',
        'coderay-linenums-mode': 'table',
        icon: 'font',
        linkattrs: true,
        encoding: 'utf-8'
}

task site(group: 'Documentation', description: 'Builds the documentation web site.', dependsOn: ['build', 'javadoc', 'jacocoTestReport', 'findbugsMain', 'asciidoctor']){
    doLast {
        logger.info 'Building documentation web site...'

        // copy the templates
        copy {
            from 'src/site'
            into 'build/site'
            include '**/*.html'
            expand([ project_version:project.version ])
        }

        // copy the assets
        copy {
            from 'src/site'
            into 'build/site'
            include '**/css/**'
            include '**/fonts/**'
            include '**/js/**'
        }

        copy {
            from 'build/docs'
            from 'build/reports'
            include '**/**'
            into 'build/site'
        }

        copy {
            from 'build/asciidoc'
            include '**/**'
            into 'build/site/guide'
        }
    }
}

task publishSite(type: GradleBuild, group: 'Publishing', description: 'Publishes the documentation web site.', dependsOn: ['site']) {
    buildFile = 'publish.gradle'
    tasks = ['publishGhPages']
}

task updateVersion(group: 'Documentation', description: 'Updates the version in documentation based on the project version'){
    doLast {
        String newVersion = project.version
        String oldVersion = project.property('from')

        logger.lifecycle "Updating documentation versions from ${oldVersion} to ${newVersion}..."

        ant.replace(file: 'README.md', token: oldVersion, value: newVersion)
        ant.replace(dir: 'src/docs/asciidoc', token: oldVersion, value: newVersion)
        ant.replace(dir: 'src/site', token: oldVersion, value: newVersion)
    }
}

task checkVersion(group: 'Verification', description: 'Verify that the project version is reflected in the documentation.'){
    doLast {
        logger.lifecycle "Verifying that the documentation references version ${project.version}..."

        // Not the most efficient way to do this but should be ok for now
        boolean documented = ['README.md', 'src/docs/asciidoc/index.adoc'].every { f ->
            boolean ok = project.file(f).text.contains(project.version)

            logger.info " - Checking: $f: $ok"
            ok
        }

        assert documented, 'The documented project version does not match the project version: Run "./gradlew updateVersion -Pfrom=OLD_VERSION" and try again.'
    }
}

task verifyArtifacts(group: 'Verification', description: 'Verifies that the published artifacts exist in the remote repository.'){
    doLast {
        def repo = "https://dl.bintray.com/http-builder-ng/dclark/org/codehaus/groovy/modules/http-builder-ng/${project.version}/"
        def artifacts = ['-sources.jar', '.jar', '.pom'].collect { "http-builder-ng-${project.version}${it}" }

        logger.lifecycle "Verifying that artifacts exist at ${repo}..."

        boolean published = artifacts.every { art ->
            boolean ok = checkUrl("${repo}${art}")
            logger.info " - Checking: ${repo}${art}: $ok"
            ok
        }

        assert published, 'Some or all of the artifacts are not published. Run with --info for more details.'
    }
}

task verifySite(group: 'Verification', description: 'Verifies that the documentation site exists at the expected address.'){
    doLast {
        def siteUrl = project.hasProperty('siteUrl') ? project.property('siteUrl') : 'https://http-builder-ng.github.io/http-builder-ng/'

        logger.lifecycle "Verifying that site exists at ${siteUrl}..."

        // we'll just hit the important ones
        boolean exists = [ '/index.html', '/guide/html5/index.html', '/javadoc/index.html' ].every { page ->
            boolean ok = checkUrl("${siteUrl}${page}")
            logger.info " - Checking: ${siteUrl}${page}: $ok"
            ok
        }

        assert exists, 'Some or all of the documentation site pages are not published. Run with --info for more details.'
    }
}

task release(group: 'Development', description: 'Release a new version of the library.', dependsOn: ['checkVersion', 'clean', 'build', 'bintrayUpload', 'publishSite']){
    doLast {
        logger.lifecycle 'Library has been released - confirm the Bintray publications and run "./gradlew verifyRelease"'
    }
}

task verifyRelease(group: 'Verification', description: 'Verifies that the release was successful.', dependsOn: ['verifyArtifacts', 'verifySite']){
    doLast {
        logger.lifecycle 'Release has been verified.'
    }
}

webPreview {
    resourceDir = file('build/site')
}

static boolean checkUrl(String url) {
    try {
        def conn = url.toURL().openConnection() as HttpURLConnection
        conn.requestMethod = 'HEAD'
        return conn.responseCode == 200
    } catch (ex) {
        return false
    }
}
