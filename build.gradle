buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.3'
    }
}

plugins {
    id 'com.jfrog.bintray' version '1.7.1'
    id "com.github.hierynomus.license" version "0.13.1"
    id 'groovy'
    id 'maven'
    id 'maven-publish'
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.7.1'
    id 'findbugs'
    id "com.stehno.gradle.webpreview" version "0.1.1"
    id 'com.github.ben-manes.versions' version '0.13.0'
}

apply plugin: 'org.asciidoctor.convert'

sourceCompatibility = 8
targetCompatibility = 8

group = 'org.codehaus.groovy.modules'
version = '0.10.2'

repositories {
    jcenter()
}

configurations {
    asciidoclet
}

dependencies {
    //required
    compile('xml-resolver:xml-resolver:1.2')
    compile('org.slf4j:slf4j-api:1.7.21')

    //optionals
    def optionals = ['com.opencsv:opencsv:3.8',
                     'org.apache.httpcomponents:httpclient:4.5.2',
                     'oauth.signpost:signpost-commonshttp4:1.2.1.1',
                     'oauth.signpost:signpost-core:1.2.1.1',
                     'org.codehaus.groovy:groovy-all:2.4.6',
                     'org.jsoup:jsoup:1.9.2',
                     'net.sourceforge.nekohtml:nekohtml:1.9.22',
                     'com.fasterxml.jackson.core:jackson-databind:2.8.1'];

    optionals.each { opt ->
        compileOnly(opt); testCompile(opt);
    }

    testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'
    testCompile 'com.squareup.okhttp3:mockwebserver:3.4.2'

    asciidoclet 'org.asciidoctor:asciidoclet:1.+'
}

javadoc {
    options.docletpath = configurations.asciidoclet.files.asType(List)
    options.links("http://docs.oracle.com/javase/8/docs/api/", "http://docs.groovy-lang.org/latest/html/gapi/");
    options.doclet = 'org.asciidoctor.Asciidoclet'
    options.overview = "src/main/java/overview.adoc"
    options.addStringOption "-base-dir", "${projectDir}"
    options.addStringOption "-attribute", "name=${project.name},version=${project.version},title-link=https://github.com/http-builder-ng/http-builder-ng[${project.name} ${project.version}]"
}

task sourcesJar(type: Jar) {
    description = 'Creates sources JAR.'
    classifier = 'sources'
    from project.sourceSets.main.allSource
}

artifacts {
    archives jar
    archives sourcesJar
}

project.publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            //artifact jar
            artifact sourcesJar
            groupId project.group
            version project.version
        }
    }

    configurations.runtime.allDependencies.each {
        println(it);
    }
}

bintray {
    def bintrayUser = project.hasProperty('user') ? project.property('user') : null;
    def bintrayKey = project.hasProperty('key') ? project.property('key') : null;

    if (bintrayUser && bintrayKey) {
        user = bintrayUser
        key = bintrayKey

        publications = ['mavenJava']

        pkg {
            repo = 'dclark'
            name = 'http-builder-ng'
            userOrg = 'http-builder-ng'
            desc = 'Groovy client for making http requests'
            licenses = ['Apache-2.0']
            labels = ['groovy']
            vcsUrl = 'https://github.com/http-builder-ng/http-builder-ng'
        }
    }
}

license {
    header rootProject.file('license_header.txt')

    // Toggle ignoreFailures to false to enable license-checking that will fail the build
    ignoreFailures true

    ext.name = 'David Clark'
    ext.year = Calendar.instance.get(Calendar.YEAR)

    excludes(['**/*.txt', '**/*.dtd', '**/*.xml', '**/*.ent', '**/*.jks'])
}

asciidoctor {
    options doctype: 'book'

    backends = ['html5']

    attributes 'source-highlighter': 'coderay',
        'coderay-linenums-mode': 'table',
        icon: 'font',
        linkattrs: true,
        encoding: 'utf-8'
}

tasks.bintrayUpload.dependsOn build

task site(group: 'Documentation', description: 'Builds the documentation web site.', dependsOn: ['build', 'javadoc', 'jacocoTestReport', 'findbugsMain', 'asciidoctor']){
    doLast {
        logger.info 'Building documentation web site...'

        // copy the templates
        copy {
            from 'src/site'
            into 'build/site'
            include '**/*.html'
            expand([ project_version:project.version ])
        }

        // copy the assets
        copy {
            from 'src/site'
            into 'build/site'
            include '**/css/**'
            include '**/fonts/**'
            include '**/js/**'
        }

        copy {
            from 'build/docs'
            from 'build/reports'
            include '**/**'
            into 'build/site'
        }

        copy {
            from 'build/asciidoc'
            include '**/**'
            into 'build/site/guide'
        }
    }
}

task publishSite(type: GradleBuild, group: 'Publishing', description: 'Publishes the documentation web site.', dependsOn: ['site']) {
    buildFile = 'publish.gradle'
    tasks = ['publishGhPages']
}

tasks.withType(FindBugs) {
    ignoreFailures = true       // let's not kill the build for this
    effort = 'max'
    reportLevel = 'low'
    reports {
        xml.enabled false
        html.enabled true
        html.stylesheet resources.text.fromFile('config/findbugs-styles.xsl')
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

task updateVersion(group: 'Documentation', description: 'Updates the version in documentation based on the project version'){
    doLast {
        String newVersion = project.version
        String oldVersion = project.property('from')

        logger.lifecycle "Updating documentation versions from ${oldVersion} to ${newVersion}..."

        ant.replace(file: 'README.md', token: oldVersion, value: newVersion)
        ant.replace(dir: 'src/docs/asciidoc', token: oldVersion, value: newVersion)
        ant.replace(dir: 'src/site', token: oldVersion, value: newVersion)
    }
}

task checkVersion(group: 'Verification', description: 'Verify that the project version is reflected in the documentation.'){
    doLast {
        logger.lifecycle "Verifying that the documentation references version ${project.version}..."

        // Not the most efficient way to do this but should be ok for now
        boolean documented = ['README.md', 'src/docs/asciidoc/index.adoc'].every { f ->
            boolean ok = project.file(f).text.contains(project.version)

            logger.info " - Checking: $f: $ok"
            ok
        }

        assert documented, 'The documented project version does not match the project version: Run "./gradlew updateVersion -Pfrom=OLD_VERSION" and try again.'
    }
}

task verifyArtifacts(group: 'Verification', description: 'Verifies that the published artifacts exist in the remote repository.'){
    doLast {
        def repo = "https://dl.bintray.com/http-builder-ng/dclark/org/codehaus/groovy/modules/http-builder-ng/${project.version}/"
        def artifacts = ['-sources.jar', '.jar', '.pom'].collect { "http-builder-ng-${project.version}${it}" }

        logger.lifecycle "Verifying that artifacts exist at ${repo}..."

        boolean published = artifacts.every { art ->
            boolean ok = checkUrl("${repo}${art}")
            logger.info " - Checking: ${repo}${art}: $ok"
            ok
        }

        assert published, 'Some or all of the artifacts are not published. Run with --info for more details.'
    }
}

task verifySite(group: 'Verification', description: 'Verifies that the documentation site exists at the expected address.'){
    doLast {
        def siteUrl = project.hasProperty('siteUrl') ? project.property('siteUrl') : 'https://http-builder-ng.github.io/http-builder-ng/'

        logger.lifecycle "Verifying that site exists at ${siteUrl}..."

        // we'll just hit the important ones
        boolean exists = [ '/index.html', '/guide/html5/index.html', '/javadoc/index.html' ].every { page ->
            boolean ok = checkUrl("${siteUrl}${page}")
            logger.info " - Checking: ${siteUrl}${page}: $ok"
            ok
        }

        assert exists, 'Some or all of the documentation site pages are not published. Run with --info for more details.'
    }
}

task release(group: 'Development', description: 'Release a new version of the library.', dependsOn: ['checkVersion', 'clean', 'build', 'bintrayUpload', 'publishSite']){
    doLast {
        logger.lifecycle 'Library has been released - confirm the Bintray publications and run "./gradlew verifyRelease"'
    }
}

task verifyRelease(group: 'Verification', description: 'Verifies that the release was successful.', dependsOn: ['verifyArtifacts', 'verifySite']){
    doLast {
        logger.lifecycle 'Release has been verified.'
    }
}

webPreview {
    resourceDir = file('build/site')
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

static boolean checkUrl(String url) {
    try {
        def conn = url.toURL().openConnection() as HttpURLConnection
        conn.requestMethod = 'HEAD'
        return conn.responseCode == 200
    } catch (ex) {
        return false
    }
}
